#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlenv.h>
#include <sqlcodes.h>
#include <sys/time.h>

#define EXIT   0
#define NOEXIT 1

void f(int a, int b, int c, int d, int* niz1, int* niz2, int* niz3, int* niz4);
void g(int a, int b, int c, int d, int* niz5, int* niz6, int* niz7, int* niz8);

/*----------------------------------------------------------------------------
Include DB2's SQL error reporting facility.
----------------------------------------------------------------------------*/

EXEC SQL INCLUDE SQLCA ;

/*----------------------------------------------------------------------------
Declare the SQL interface variables.
----------------------------------------------------------------------------*/

EXEC SQL BEGIN DECLARE SECTION ;
    int input1_sqc;
    int input2_sqc;
    int input3_sqc;
    int input4_sqc;
    int account_id_sqc;
    int cust_id_sqc;
    int opendate_sqc;
    int product_cd_sqc;
EXEC SQL END DECLARE SECTION ;

/*----------------------------------------------------------------------------
Declare variables to be used in the following C program.
----------------------------------------------------------------------------*/

char msg[1025];
int rc;
int errcount;

/*----------------------------------------------------------------------------
This macro prints the message in the SQLCA if the return code is 0
and the SQLCODE is not 0.
----------------------------------------------------------------------------*/

#define PRINT_MESSAGE()                                               \
  {                                                                   \
      if (rc == 0 && sqlca.sqlcode != 0)                              \
      {                                                               \
        sqlaintp(msg, 1024, 0, &sqlca);                               \
        printf("%s\n",msg);                                           \
      }                                                               \
  }

/*----------------------------------------------------------------------------
This macro prints out all feilds in the SQLCA.
----------------------------------------------------------------------------*/

#define DUMP_SQLCA()                                                         \
  {                                                                          \
    printf("********************  DUMP OF SQLCA  ********************\n");   \
    printf("SQLCAID: %s\n", sqlca.sqlcaid);                                  \
    printf("SQLCABC: %d\n", sqlca.sqlcabc);                                  \
    printf("SQLCODE: %d\n", sqlca.sqlcode);                                  \
    printf("SQLERRML: %d\n", sqlca.sqlerrml);                                \
    printf("SQLERRMC: %s\n", sqlca.sqlerrmc);                                \
    printf("SQLERRP: %s\n", sqlca.sqlerrp);                                  \
    printf("SQLERRD[0]: %d\n", sqlca.sqlerrd[0]);                            \
    printf("SQLERRD[1]: %d\n", sqlca.sqlerrd[1]);                            \
    printf("SQLERRD[2]: %d\n", sqlca.sqlerrd[2]);                            \
    printf("SQLERRD[3]: %d\n", sqlca.sqlerrd[3]);                            \
    printf("SQLERRD[4]: %d\n", sqlca.sqlerrd[4]);                            \
    printf("SQLERRD[5]: %d\n", sqlca.sqlerrd[5]);                            \
    printf("SQLWARN: %s\n", sqlca.sqlwarn);                                  \
    printf("SQLSTATE: %s\n", sqlca.sqlstate);                                \
    printf("******************  END OF SQLCA DUMP  *******************\n");  \
  }

/*----------------------------------------------------------------------------
This macro prints the message in the SQLCA if one exists.  If the
return code is not 0 or the SQLCODE is not expected, an error occurred
and must be recorded.
----------------------------------------------------------------------------*/

#define CHECK_SQL(code,text_string,eExit)                             \
  {                                                                   \
    PRINT_MESSAGE();                                                  \
    if (rc != 0 || sqlca.sqlcode != code) {                           \
      printf("%s\n",text_string);                                     \
      printf("Expected code = %d\n",code);                            \
      if (rc == 0) {                                                  \
          DUMP_SQLCA();                                               \
      }                                                               \
      else printf("RC: %d\n",rc);                                     \
      errcount += 1;                                                  \
      if (eExit == EXIT) goto errorexit;                              \
    }                                                                 \
  }

/*----------------------------------------------------------------------------
The PROGRAM.
----------------------------------------------------------------------------*/

int main (int argc, char *argv[])
{
        int niz1[5], niz2[5], niz3[5], niz4[5], niz5[5], niz6[5], niz7[5], niz8[5], i, a, b, c, d;

    	if (argc < 5) {
           printf("Which start date, title1, title2 and name?\n");
           exit(0);
    	}

	a = atoi(argv[1]);
	b = atoi(argv[2]);
	c = atoi(argv[3]);
	d = atoi(argv[4]);

	EXEC SQL CONNECT TO MSTUD;
        CHECK_SQL(0, "Connect failed", EXIT);

	f(a, b, c, d, niz1, niz2, niz3, niz4);
	for (i = 0; i<5; i++)
	  printf("%d - %d - %d - %d\n", niz1[i], niz2[i], niz3[i], niz4[i]);

	g(a, b, c, d, niz5, niz6, niz7, niz8);
	for (i = 0; i<5; i++)
	  printf("%d - %d - %d - %d\n", niz5[i], niz6[i], niz7[i], niz8[i]);


        printf("Executed Successfuly\n") ;

errorexit:
        EXEC SQL CONNECT RESET;
	return 0;
}



void f(int a, int b, int c, int d, int *niz1, int *niz2, int *niz3, int *niz4) {
        input1_sqc = a;
	input2_sqc = b;
	input3_sqc = c;
	input4_sqc = d;
	
	EXEC SQL DECLARE c1 CURSOR FOR
	  SELECT a_account_id, a_cust_id, a_open_date, a_product_cd
	  FROM account a, branch b, employee e
	  WHERE a_open_emp_id = e_emp_id
	  AND e_start_date < :input1_sqc + 365
	  AND e_assigned_branch_id = b_branch_id
	  AND (e_title = :input2_sqc OR e.title = :input3_sqc)
	  AND b_name = :input4_sqc
	  ORDER BY a_account_id, a_cust_id, a_open_date, a_product_cd
	  LIMIT 5;
        CHECK_SQL(0, "Cursor declaration failed.", EXIT);

	EXEC SQL OPEN c1;
        CHECK_SQL(0, "Cursor opening failed.", EXIT);

	int i = 0;
	do {
	      EXEC SQL FETCH c1 INTO :account_id_sqc, :cust_id_sqc, :opendate_sqc, :product_cd_sqc;
              
	      if (sqlca.sqlcode) {
		niz1[i] = -1;
		niz2[i] = -1;
		niz3[i] = -1;
		niz4[i] = -1;
	      }
	      else {
		niz1[i] = account_id_sqc;
		niz2[i] = cust_id_sqc;
		niz3[i] = opendate_sqc;
		niz4[i] = product_cd_sqc;
	      }

	      i++;
	}
	while (i < 5);

	EXEC SQL CLOSE c1;
        CHECK_SQL(0, "Cursor closing failed.", EXIT);

errorexit:
	return;
}

//void f(int a, int b, int c, int d, int *niz1, int *niz2, int *niz3, int *niz4) {
//        input1_sqc = a;
//	input2_sqc = b;
//	input3_sqc = c;
//	input4_sqc = d;
//	
//	EXEC SQL DECLARE c1 CURSOR FOR
//	  SELECT a_account_id, a_cust_id, a_open_date, a_product_cd
//	  FROM account a, branch b, employee e
//	  WHERE a_open_emp_id = e_emp_id
//	  AND e_start_date < :input1_sqc + 365
//	  AND e_assigned_branch_id = b_branch_id
//	  AND (e_title = :input2_sqc OR e.title = :input3_sqc)
//	  AND b_name = :input4_sqc
//	  ORDER BY a_account_id, a_cust_id, a_open_date, a_product_cd
//	  LIMIT 5;
//        CHECK_SQL(0, "Cursor declaration failed.", EXIT);
//
//	EXEC SQL OPEN c1;
//        CHECK_SQL(0, "Cursor opening failed.", EXIT);
//
//	int i = 0;
//	do {
//	      EXEC SQL FETCH c1 INTO :account_id_sqc, :cust_id_sqc, :opendate_sqc, :product_cd_sqc;
//              
//	      if (sqlca.sqlcode) {
//		niz1[i] = -1;
//		niz2[i] = -1;
//		niz3[i] = -1;
//		niz4[i] = -1;
//	      }
//	      else {
//		niz1[i] = account_id_sqc;
//		niz2[i] = cust_id_sqc;
//		niz3[i] = opendate_sqc;
//		niz4[i] = product_cd_sqc;
//	      }
//
//	      i++;
//	}
//	while (i < 5);
//
//	EXEC SQL CLOSE c1;
//        CHECK_SQL(0, "Cursor closing failed.", EXIT);
//
//errorexit:
//	return;
//}

//void g(int a, int b, int c, int d, int *niz1, int *niz2, int *niz3, int *niz4) {
//        input1_sqc = a;
//	input2_sqc = b;
//	input3_sqc = c;
//	input4_sqc = d;
//	
//	EXEC SQL DECLARE c2 CURSOR FOR
//	  SELECT a_account_id, a_cust_id, a_open_date, a_product_cd
//	  FROM account a, branch b, employee e
//	  WHERE (a_open_emp_id = e_emp_id
//	  AND e_start_date < :input1_sqc
//	  AND e_assigned_branch_id = b_branch_id
//	  AND e_title = :input2_sqc
//	  AND b_name = :input4_sqc)
//	  OR
//	  (a_open_emp_id = e_emp_id
//  	  AND e_start_date < :input1_sqc
//	  AND e_assigned_branch_id = b_branch_id
//	  AND e.title = :input3_sqc
//	  AND b_name = :input4_sqc)
//	  ORDER BY a_account_id, a_cust_id, a_open_date, a_product_cd
//	  LIMIT 5;
//        CHECK_SQL(0, "Cursor declaration failed.", EXIT);
//
//	EXEC SQL OPEN c2;
//        CHECK_SQL(0, "Cursor opening failed.", EXIT);
//
//	int i = 0;
//	do {
//	      EXEC SQL FETCH c2 INTO :account_id_sqc, :cust_id_sqc, :opendate_sqc, :product_cd_sqc;
//              
//	      if (sqlca.sqlcode) {
//		niz1[i] = -1;
//		niz2[i] = -1;
//		niz3[i] = -1;
//		niz4[i] = -1;
//	      }
//	      else {
//		niz1[i] = account_id_sqc;
//		niz2[i] = cust_id_sqc;
//		niz3[i] = opendate_sqc;
//		niz4[i] = product_cd_sqc;
//	      }
//
//	      i++;
//	}
//	while (i < 5);
//
//	EXEC SQL CLOSE c2;
//        CHECK_SQL(0, "Cursor closing failed.", EXIT);
//
//errorexit:
//	return;
//}




