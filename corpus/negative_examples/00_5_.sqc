#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlenv.h>
#include <sqlcodes.h>
#include <sys/time.h>

#define EXIT   0
#define NOEXIT 1

/*----------------------------------------------------------------------------
Include DB2's SQL error reporting facility.
----------------------------------------------------------------------------*/

EXEC SQL INCLUDE SQLCA ;

/*----------------------------------------------------------------------------
Declare the SQL interface variables.
----------------------------------------------------------------------------*/

EXEC SQL BEGIN DECLARE SECTION ;
    int input_sqc;
    int zip_sqc;
    int branch_id_sqc;
EXEC SQL END DECLARE SECTION ;

/*----------------------------------------------------------------------------
Declare variables to be used in the following C program.
----------------------------------------------------------------------------*/

char msg[1025];
int rc;
int errcount;

/*----------------------------------------------------------------------------
This macro prints the message in the SQLCA if the return code is 0
and the SQLCODE is not 0.
----------------------------------------------------------------------------*/

#define PRINT_MESSAGE()                                               \
  {                                                                   \
      if (rc == 0 && sqlca.sqlcode != 0)                              \
      {                                                               \
        sqlaintp(msg, 1024, 0, &sqlca);                               \
        printf("%s\n",msg);                                           \
      }                                                               \
  }

/*----------------------------------------------------------------------------
This macro prints out all feilds in the SQLCA.
----------------------------------------------------------------------------*/

#define DUMP_SQLCA()                                                         \
  {                                                                          \
    printf("********************  DUMP OF SQLCA  ********************\n");   \
    printf("SQLCAID: %s\n", sqlca.sqlcaid);                                  \
    printf("SQLCABC: %d\n", sqlca.sqlcabc);                                  \
    printf("SQLCODE: %d\n", sqlca.sqlcode);                                  \
    printf("SQLERRML: %d\n", sqlca.sqlerrml);                                \
    printf("SQLERRMC: %s\n", sqlca.sqlerrmc);                                \
    printf("SQLERRP: %s\n", sqlca.sqlerrp);                                  \
    printf("SQLERRD[0]: %d\n", sqlca.sqlerrd[0]);                            \
    printf("SQLERRD[1]: %d\n", sqlca.sqlerrd[1]);                            \
    printf("SQLERRD[2]: %d\n", sqlca.sqlerrd[2]);                            \
    printf("SQLERRD[3]: %d\n", sqlca.sqlerrd[3]);                            \
    printf("SQLERRD[4]: %d\n", sqlca.sqlerrd[4]);                            \
    printf("SQLERRD[5]: %d\n", sqlca.sqlerrd[5]);                            \
    printf("SQLWARN: %s\n", sqlca.sqlwarn);                                  \
    printf("SQLSTATE: %s\n", sqlca.sqlstate);                                \
    printf("******************  END OF SQLCA DUMP  *******************\n");  \
  }

/*----------------------------------------------------------------------------
This macro prints the message in the SQLCA if one exists.  If the
return code is not 0 or the SQLCODE is not expected, an error occurred
and must be recorded.
----------------------------------------------------------------------------*/

#define CHECK_SQL(code,text_string,eExit)                             \
  {                                                                   \
    PRINT_MESSAGE();                                                  \
    if (rc != 0 || sqlca.sqlcode != code) {                           \
      printf("%s\n",text_string);                                     \
      printf("Expected code = %d\n",code);                            \
      if (rc == 0) {                                                  \
          DUMP_SQLCA();                                               \
      }                                                               \
      else printf("RC: %d\n",rc);                                     \
      errcount += 1;                                                  \
      if (eExit == EXIT) goto errorexit;                              \
    }                                                                 \
  }

/*----------------------------------------------------------------------------
The PROGRAM.
----------------------------------------------------------------------------*/

main (int argc, char *argv[])
{
    	if (argc < 3) {
           printf("Which zip and branch id?\n");
           exit(0);
    	}

        EXEC SQL CONNECT TO MSTUD;
        CHECK_SQL(0, "Connect failed", EXIT);

	printf("%d\n", f(atoi(argv[1]), atoi(argv[2])));
	printf("%d\n", g(atoi(argv[1]), atoi(argv[2])));

        printf("Executed Successfuly\n") ;

errorexit:
        EXEC SQL CONNECT RESET;
}



int f(int a, int b) {
    	input_sqc = b;
	EXEC SQL SELECT T1.b_zip INTO :zip_sqc
	  FROM branch AS T1
	  WHERE T1.b_branch_id = :input_sqc;

	if (!sqlca.sqlcode && zip_sqc == a)
	   return 1;
	else
	   return 0;
}

//int f(int a, int b) {
//    	input_sqc = a;
//	EXEC SQL SELECT T1.b_branch_id INTO :branch_id_sqc
//	  FROM branch AS T1
//	  WHERE T1.b_zip = :input_sqc;
//
//	if (!sqlca.sqlcode && branch_id_sqc == b)
//	   return 1;
//	else
//	   return 0;
//}

//int g(int a, int b) {
//    	input_sqc = b;
//	EXEC SQL SELECT T1.b_zip INTO :zip_sqc
//	  FROM branch AS T1
//	  WHERE T1.b_branch_id = :input_sqc;
//
//	if (!sqlca.sqlcode && zip_sqc == a)
//	   return 1;
//	else
//	   return 0;
//}





